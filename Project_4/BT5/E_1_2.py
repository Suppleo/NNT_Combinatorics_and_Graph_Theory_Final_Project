class SGBGraph:
    def __init__(self):
        self.vertices = []  # list of vertex labels
        self.edges = []     # list of (source, target, label)

    def read_sgb(self, filename):
        with open(filename, 'r') as f:
            lines = [line.strip() for line in f if line.strip()]
        
        assert lines[0].startswith("* GraphBase")
        assert "* Vertices" in lines
        assert "* Arcs" in lines

        v_start = lines.index("* Vertices") + 1
        a_start = lines.index("* Arcs") + 1
        checksum_line = [i for i, l in enumerate(lines) if l.startswith("* Checksum")][0]

        # Read vertices
        self.vertices = []
        vertex_edges = []  # Ai for each vertex
        for line in lines[v_start : a_start - 1]:
            parts = line.split(",")
            label, Ai = parts[0], int(parts[1])
            self.vertices.append(label)
            vertex_edges.append(Ai)

        # Read edges
        raw_edges = lines[a_start : checksum_line]
        edge_targets = []
        edge_nexts = []
        edge_labels = []

        for line in raw_edges:
            _, tgt = line.split(",")[0].split()
            tgt = int(tgt)
            Ai = int(line.split(",")[1])
            label = int(line.split(",")[2])
            edge_targets.append(tgt)
            edge_nexts.append(Ai)
            edge_labels.append(label)

        # Reconstruct edges per vertex using Ai chaining
        edge_map = {}
        for i, (tgt, nxt, lbl) in enumerate(zip(edge_targets, edge_nexts, edge_labels)):
            edge_map[i] = (tgt, nxt, lbl)

        self.edges = []
        for v, first in enumerate(vertex_edges):
            i = first
            while i != 0:
                tgt, nxt, lbl = edge_map[i]
                self.edges.append((v, tgt, lbl))
                i = nxt

    def write_sgb(self, filename):
        with open(filename, 'w') as f:
            n = len(self.vertices)
            m = len(self.edges)
            f.write(f"* GraphBase graph (utiltypes ...,{n},{m})\n")
            f.write("Generated by SGBGraph\n")
            f.write("* Vertices\n")

            edge_idx = 1  # start at 1 because Ai=0 means no edge
            edge_chain = {}
            vertex_first_edge = {}

            for v in range(n):
                out_edges = [(i, e) for i, e in enumerate(self.edges) if e[0] == v]
                if not out_edges:
                    vertex_first_edge[v] = 0
                    continue

                first_i = edge_idx
                vertex_first_edge[v] = first_i

                for i, (eid, (src, tgt, lbl)) in enumerate(out_edges):
                    curr_id = edge_idx
                    edge_idx += 1
                    if i < len(out_edges) - 1:
                        nxt = edge_idx
                    else:
                        nxt = 0
                    edge_chain[curr_id] = (tgt, nxt, lbl)

                # Safety check: all edges handled
                assert len(out_edges) == edge_idx - first_i

            for v, label in enumerate(self.vertices):
                Ai = vertex_first_edge[v]
                f.write(f"{label},{Ai},0,0\n")

            f.write("* Arcs\n")
            for i in sorted(edge_chain):
                tgt, nxt, lbl = edge_chain[i]
                f.write(f"V {tgt},{nxt},{lbl},0\n")

            f.write("* Checksum 0\n")
